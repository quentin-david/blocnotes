<?php

namespace QT\BlocnotesBundle\Repository;

use QT\BlocnotesBundle\Entity\Topic;
use QT\BlocnotesBundle\Entity\Bugzilla;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * BugzillaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BugzillaRepository extends \Doctrine\ORM\EntityRepository
{
  
    /**
   * Formulaire de recherche de Bugzilla
     */
    public function search(Bugzilla $search=null)
    {
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('QT\BlocnotesBundle\Entity\Topic', 'p');
       
        $query = 'SELECT * FROM topic, bugzilla ';
        $query .= 'WHERE bugzilla.id = topic.bugzilla_id ';
        $query .= 'AND topic.bugzilla_id is not null ';
        $params = array();
        if($search != ''){
            if ($search->getApplication() != '') {
                $query .= 'AND application_id = :application ';
                $params['application'] = $search->getApplication();
            }
            if ($search->getEtat() != '') {
                $query .= 'AND etat = :etat ';
                $params['etat'] = $search->getEtat();
            }
            if ($search->getCategorie() != '') {
                $query .= 'AND categorie = :categorie ';
                $params['categorie'] = $search->getCategorie();
            }
        }

        $request = $this->getEntityManager()->createNativeQuery($query, $rsm);
        $request->setParameters($params);
        return $request;
    }
}
